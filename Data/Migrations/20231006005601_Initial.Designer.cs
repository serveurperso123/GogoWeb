// <auto-generated />
using System;
using GogoWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GogoWeb.Data.Migrations
{
    [DbContext(typeof(GogoWebContext))]
    [Migration("20231006005601_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GogoDriverWeb.Models.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCourse")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Destination")
                        .HasColumnType("bit");

                    b.Property<int?>("EtatCourse")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HeureCourse")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Position")
                        .HasColumnType("bit");

                    b.Property<string>("ReservationIdNavigationReservationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehiculeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseId");

                    b.HasIndex("ReservationIdNavigationReservationId");

                    b.HasIndex("VehiculeId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.ModePaiement", b =>
                {
                    b.Property<string>("ModePaiementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LibelleMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pourcentage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModePaiementId");

                    b.ToTable("ModePaiements");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.Paiement", b =>
                {
                    b.Property<string>("PaiementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DatePaiement")
                        .HasColumnType("datetime2");

                    b.Property<string>("EtatPaiement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facturation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModePaiementId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MomtantPaiement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Telephone")
                        .HasColumnType("bigint");

                    b.HasKey("PaiementId");

                    b.HasIndex("ModePaiementId");

                    b.ToTable("Paiements");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.Plainte", b =>
                {
                    b.Property<string>("PlainteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DatePlainte")
                        .HasColumnType("datetime2");

                    b.Property<string>("GogoWebUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LibellePlainte")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlainteId");

                    b.HasIndex("GogoWebUserId");

                    b.ToTable("Plaintes");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.Reservation", b =>
                {
                    b.Property<string>("ReservationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateReservation")
                        .HasColumnType("datetime2");

                    b.Property<string>("GogoWebUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("HeureDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HeureFin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NbrePassages")
                        .HasColumnType("int");

                    b.Property<bool?>("Position")
                        .HasColumnType("bit");

                    b.Property<string>("TypeReservationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReservationId");

                    b.HasIndex("GogoWebUserId");

                    b.HasIndex("TypeReservationId");

                    b.ToTable("Reservtions");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.So", b =>
                {
                    b.Property<string>("SoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GogoWebUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Localisation")
                        .HasColumnType("int");

                    b.HasKey("SoId");

                    b.HasIndex("GogoWebUserId");

                    b.ToTable("Sos");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.TypeReservation", b =>
                {
                    b.Property<string>("TypeReservationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NomType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PrixUnitaire")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TauxPeriodique")
                        .HasColumnType("int");

                    b.HasKey("TypeReservationId");

                    b.ToTable("TypeReservations");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.TypeVehicule", b =>
                {
                    b.Property<string>("TypevehiculeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypevehiculeId");

                    b.ToTable("TypeVehicules");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.Vehicule", b =>
                {
                    b.Property<string>("VehiculeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Assurance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Couleur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Immatriculation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marque")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomVehicule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumeroChassis")
                        .HasColumnType("int");

                    b.Property<string>("TypeReservationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypevehiculeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VehiculeId");

                    b.HasIndex("TypeReservationId");

                    b.HasIndex("TypevehiculeId");

                    b.ToTable("Vehicules");
                });

            modelBuilder.Entity("GogoWeb.Areas.Identity.Data.GogoWebUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Cni")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Etat")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NumCapacite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumPermi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GogoWebUserVehicule", b =>
                {
                    b.Property<string>("IdVehiculesVehiculeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdVehiculesVehiculeId", "IdsId");

                    b.HasIndex("IdsId");

                    b.ToTable("GogoWebUserVehicule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PaiementReservation", b =>
                {
                    b.Property<string>("IdPaiementsPaiementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdReservationsReservationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdPaiementsPaiementId", "IdReservationsReservationId");

                    b.HasIndex("IdReservationsReservationId");

                    b.ToTable("PaiementReservation");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.Course", b =>
                {
                    b.HasOne("GogoDriverWeb.Models.Reservation", "ReservationIdNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("ReservationIdNavigationReservationId");

                    b.HasOne("GogoDriverWeb.Models.Vehicule", "VehiculeIdNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("VehiculeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReservationIdNavigation");

                    b.Navigation("VehiculeIdNavigation");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.Paiement", b =>
                {
                    b.HasOne("GogoDriverWeb.Models.ModePaiement", "ModePaiementIdNavigation")
                        .WithMany("Paiements")
                        .HasForeignKey("ModePaiementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModePaiementIdNavigation");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.Plainte", b =>
                {
                    b.HasOne("GogoWeb.Areas.Identity.Data.GogoWebUser", "GogoWebUserIdNavigation")
                        .WithMany("Plaintes")
                        .HasForeignKey("GogoWebUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GogoWebUserIdNavigation");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.Reservation", b =>
                {
                    b.HasOne("GogoWeb.Areas.Identity.Data.GogoWebUser", "GogoWebUserIdNavigation")
                        .WithMany("Reservtions")
                        .HasForeignKey("GogoWebUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GogoDriverWeb.Models.TypeReservation", "TypeReservationIdNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("TypeReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GogoWebUserIdNavigation");

                    b.Navigation("TypeReservationIdNavigation");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.So", b =>
                {
                    b.HasOne("GogoWeb.Areas.Identity.Data.GogoWebUser", "PersonneIdNavigation")
                        .WithMany("Sos")
                        .HasForeignKey("GogoWebUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonneIdNavigation");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.Vehicule", b =>
                {
                    b.HasOne("GogoDriverWeb.Models.TypeReservation", "TypeReservationIdNavigation")
                        .WithMany("Vehicules")
                        .HasForeignKey("TypeReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GogoDriverWeb.Models.TypeVehicule", "TypevehiculeIdNavigation")
                        .WithMany("Vehicules")
                        .HasForeignKey("TypevehiculeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeReservationIdNavigation");

                    b.Navigation("TypevehiculeIdNavigation");
                });

            modelBuilder.Entity("GogoWebUserVehicule", b =>
                {
                    b.HasOne("GogoDriverWeb.Models.Vehicule", null)
                        .WithMany()
                        .HasForeignKey("IdVehiculesVehiculeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GogoWeb.Areas.Identity.Data.GogoWebUser", null)
                        .WithMany()
                        .HasForeignKey("IdsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GogoWeb.Areas.Identity.Data.GogoWebUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GogoWeb.Areas.Identity.Data.GogoWebUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GogoWeb.Areas.Identity.Data.GogoWebUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GogoWeb.Areas.Identity.Data.GogoWebUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaiementReservation", b =>
                {
                    b.HasOne("GogoDriverWeb.Models.Paiement", null)
                        .WithMany()
                        .HasForeignKey("IdPaiementsPaiementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GogoDriverWeb.Models.Reservation", null)
                        .WithMany()
                        .HasForeignKey("IdReservationsReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GogoDriverWeb.Models.ModePaiement", b =>
                {
                    b.Navigation("Paiements");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.Reservation", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.TypeReservation", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Vehicules");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.TypeVehicule", b =>
                {
                    b.Navigation("Vehicules");
                });

            modelBuilder.Entity("GogoDriverWeb.Models.Vehicule", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("GogoWeb.Areas.Identity.Data.GogoWebUser", b =>
                {
                    b.Navigation("Plaintes");

                    b.Navigation("Reservtions");

                    b.Navigation("Sos");
                });
#pragma warning restore 612, 618
        }
    }
}
